
/// ========================================================================
/// libloading (https://github.com/mrpi/libloading)
///
/// License: Boost Software License - Version 1.0, 
///
/// Copyright Ludger Sprenker 2004 - 2006.
///
/// Boost Software License - Version 1.0 - August 17th, 2003
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license (the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third-parties to whom the Software is furnished to
/// do so, all subject to the following:
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine-executable object code generated by
/// a source language processor.
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.
/// ========================================================================


/// ========================================================================
/// UNLICENSE
/// 
/// This is free and unencumbered software released into the public domain.
/// Anyone is free to copy, modify, publish, use, compile, sell, or
/// distribute this software, either in source code form or as a compiled
/// binary, for any purpose, commercial or non-commercial, and by any
/// means.
///
/// In jurisdictions that recognize copyright laws, the author or authors
/// of this software dedicate any and all copyright interest in the
/// software to the public domain. We make this dedication for the benefit
/// of the public at large and to the detriment of our heirs and
/// successors. We intend this dedication to be an overt act of
/// relinquishment in perpetuity of all present and future rights to this
/// software under copyright law.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
/// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
/// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
/// IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
/// OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
/// OTHER DEALINGS IN THE SOFTWARE.
///
/// For more information, please refer to <http://unlicense.org/>
/// ========================================================================

#pragma once

#include <string>
#include <stdexcept>
#include <sstream>

#include "HandyBase.hpp"
#include "HandyResult.hpp"
#include "HandyPIMPL.hpp"


#if !defined IS_ANDROID && !defined IS_EMSCRIPTEN

	namespace HANDY_NS {

		// This class is almost a complete rewrite of: https://github.com/mrpi/libloading
		class Library
		{
			ADDPRIVATE_CLASS_NOCOPY

				union Alias
			{
				void(* func)();          // <- This is the function pointer equivalent to "void *".
				void * var;
			};

			Alias Symbol(std::string const & name);

		protected:
			template <typename T> struct StdCall;
			template <typename T> struct CDecl;

			template <typename RETURNTYPE, typename... ARGS>
			struct StdCall<RETURNTYPE(ARGS...)>
			{
				typedef RETURNTYPE(STDCALL *FuncSig)(ARGS...);

				static FuncSig init(Library * lib,  std::string const & funcName)
				{
					return reinterpret_cast<FuncSig>(lib->Symbol(funcName).func);
				}
			};

			template <typename RETURNTYPE, typename... ARGS>
			struct CDecl<RETURNTYPE(ARGS...)>
			{
				typedef RETURNTYPE(CDECL *FuncSig)(ARGS...);

				static FuncSig init(Library * lib, std::string const & funcName)
				{
					return reinterpret_cast<FuncSig>(lib->Symbol(funcName).func);
				}
			};

			template <typename TYPE>
			struct VariablePtr
			{
				static TYPE * init(Library * lib, std::string const & fieldName)
				{
					return reinterpret_cast<TYPE *>(lib->Symbol(fieldName).var);
				}
			};

			explicit Library(std::filesystem::path libFile);
			bool IsValid() const;
			void ThrowIfNotValid() const;
		};
	}
	#define   VARIABLEPTRDEF(NAME, TYPE) TYPE * NAME = VariablePtr<TYPE>::init(this, #NAME)
	#define   CDECLDEF(NAME, SIGNATURE)   CDecl<SIGNATURE>::FuncSig NAME =   CDecl<SIGNATURE>::init(this, #NAME)
	#define STDCALLDEF(NAME, SIGNATURE) StdCall<SIGNATURE>::FuncSig NAME = StdCall<SIGNATURE>::init(this, #NAME)


#endif
